

################################################################################################
# Addendum: SIP Workflow Template & Pre-Planning Handshake (v2)
################################################################################################

**Requirement:** For SIP flows, PlannerAgent MUST first consume outputs from SIPGoalPlannerAgent before constructing the full multi-agent plan.

### Two-Stage Planning Pattern for SIP
1) **Pre-Plan Node (Discovery-like):**
   - T001: SIPGoalPlannerAgent → emits {goal_input_json, inflation_adjusted_json, sip_calc_json, allocation_plan_json}
2) **Final Plan Assembly:**
   - T010: PlannerAgent reads T001 outputs and creates the remaining chain:
     - T011: RetrieverAgent (fetch raw fund data by categories)
     - T012: DistillerAgent (fund_shortlist)
     - T013: ThinkerAgent (finalize allocation_plan_json if shortlist affects categories)
     - T014: QAAgent (math, allocation=100%, shortlist non-empty, units present)
     - T015: CoderAgent (chart_data_json, embed_snippet_html)
     - T016: FormatterAgent (formatted_report_T016)
     - T017: ReportGeneratorAgent (comprehensive_report.html)
     - T018: SchedulerAgent (optional monthly refresh)

### Node & Edge Template (object-style edges)
{
  "plan_graph": {
    "nodes": [
      {
        "id": "T001",
        "agent": "SIPGoalPlannerAgent",
        "description": "Normalize inputs, compute inflation & SIP, propose allocation (categories).",
        "agent_prompt": "Run SIPGoalPlannerAgent per its prompt; emit goal_input_json, inflation_adjusted_json, sip_calc_json, allocation_plan_json.",
        "reads": [],
        "writes": ["T001"]
      },
      {
        "id": "T010",
        "agent": "PlannerAgent",
        "description": "Assemble final SIP execution plan using outputs from T001.",
        "agent_prompt": "Create nodes T011–T018 as per SIP chain using T001 outputs as inputs.",
        "reads": ["T001"],
        "writes": ["T010"]
      },
      { "id": "T011", "agent": "RetrieverAgent", "description": "Fetch raw fund data by categories.", "agent_prompt": "AMFI/ValueResearch/Yahoo; raw outputs only.", "reads": ["T001"], "writes": ["T011"] },
      { "id": "T012", "agent": "DistillerAgent", "description": "Shortlist funds.", "agent_prompt": "Condense raw results into fund_shortlist; no fabricated metrics.", "reads": ["T011"], "writes": ["T012"] },
      { "id": "T013", "agent": "ThinkerAgent", "description": "Reconcile shortlist with allocation categories.", "agent_prompt": "Confirm or tweak allocation_plan_json with rationale.", "reads": ["T001","T012"], "writes": ["T013"] },
      { "id": "T014", "agent": "QAAgent", "description": "Quality gate.", "agent_prompt": "Validate r,n, denominator, allocation=100%, shortlist non-empty, currency.", "reads": ["T001","T013"], "writes": ["T014"] },
      { "id": "T015", "agent": "CoderAgent", "description": "Chart datasets + embed HTML.", "agent_prompt": "Create chart_data_json and embed_snippet_html.", "reads": ["T001","T013","T014"], "writes": ["T015"] },
      { "id": "T016", "agent": "FormatterAgent", "description": "Consulting-grade HTML.", "agent_prompt": "Build single-line HTML report using prior outputs.", "reads": ["T001","T013","T015","T014"], "writes": ["T016"] },
      { "id": "T017", "agent": "ReportGeneratorAgent", "description": "Package final HTML file.", "agent_prompt": "Return files{\"comprehensive_report.html\": \"...\"}.", "reads": ["T016"], "writes": ["T017"] },
      { "id": "T018", "agent": "SchedulerAgent", "description": "Optional monthly refresh.", "agent_prompt": "Cron 0 9 1 * * resume from retriever with last inputs.", "reads": ["T001","T017"], "writes": ["T018"] }
    ],
    "edges": [
      {"source": "ROOT", "target": "T001"},
      {"source": "T001", "target": "T010"},
      {"source": "T010", "target": "T011"},
      {"source": "T011", "target": "T012"},
      {"source": "T012", "target": "T013"},
      {"source": "T013", "target": "T014"},
      {"source": "T014", "target": "T015"},
      {"source": "T015", "target": "T016"},
      {"source": "T016", "target": "T017"},
      {"source": "T017", "target": "T018"}
    ]
  },
  "next_step_id": "T001"
}

### Validation
- Enforce object-style edges {"source","target"} and "ROOT" origin.
- Do not create the final chain before T001 has emitted its outputs.
- Treat T010 as the meta-planning consolidation step using T001 outputs.
